# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.utils import util


class TokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, signed_nonce=None, nonce=None, address=None):  # noqa: E501
        """TokenRequest - a model defined in OpenAPI

        :param signed_nonce: The signed_nonce of this TokenRequest.  # noqa: E501
        :type signed_nonce: str
        :param nonce: The nonce of this TokenRequest.  # noqa: E501
        :type nonce: str
        :param address: The address of this TokenRequest.  # noqa: E501
        :type address: str
        """
        self.openapi_types = {
            'signed_nonce': str,
            'nonce': str,
            'address': str
        }

        self.attribute_map = {
            'signed_nonce': 'signedNonce',
            'nonce': 'nonce',
            'address': 'address'
        }

        self._signed_nonce = signed_nonce
        self._nonce = nonce
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'TokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tokenRequest of this TokenRequest.  # noqa: E501
        :rtype: TokenRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def signed_nonce(self):
        """Gets the signed_nonce of this TokenRequest.


        :return: The signed_nonce of this TokenRequest.
        :rtype: str
        """
        return self._signed_nonce

    @signed_nonce.setter
    def signed_nonce(self, signed_nonce):
        """Sets the signed_nonce of this TokenRequest.


        :param signed_nonce: The signed_nonce of this TokenRequest.
        :type signed_nonce: str
        """

        self._signed_nonce = signed_nonce

    @property
    def nonce(self):
        """Gets the nonce of this TokenRequest.


        :return: The nonce of this TokenRequest.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this TokenRequest.


        :param nonce: The nonce of this TokenRequest.
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def address(self):
        """Gets the address of this TokenRequest.


        :return: The address of this TokenRequest.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TokenRequest.


        :param address: The address of this TokenRequest.
        :type address: str
        """

        self._address = address
